# Evaluate reduced PLS model
reflectance2 <- reduced.tsv.df[,c(1:ncol(reduced.tsv.df))] # reflectance values
refl2 = as.matrix(reflectance2) # wavelengths need to be in a matrix
TSV2 = mmtsv$TSV # store TSV
tsv2.red = plsr(TSV2 ~ refl2, data = reduced.tsv.df, ncomp = 10, validation = "LOO")
# compare model performance: observed TSV, full-model TSV, reduced-model TSV
mod.compare.df = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv2.red,ncomp = 4))
par(mfrow=c(1,2))
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
summary(lm(mod.compare.df[,1]~mod.compare.df[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model")
summary(lm(mod.compare.df[,1]~mod.compare.df[,3]))
abline(0,1)
data.frame(Reduced = R2(tsv2.red)$val[1,1,1:11], Full = R2(tsv1)$val[1,1,1:11])
panes = function(x,y){
par(mfrow=c(x,y))
}
panes(1,2)
plot(RMSEP(tsv1), legendpos = "topright", main = "LOO Validation Error")
plot(RMSEP(tsv2.red), legendpos = "topright", main = "LOO Validation Error")
#mod.compare.df = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv2.red,ncomp = 4))
par(mfrow=c(1,2))
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,3]))
abline(0,1)
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,2]))
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
mod.compare.df2 = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv3.bands.pls,ncomp = 4))
par(mfrow=c(1,3))
plot(mod.compare.df2[,1], mod.compare.df2[,2], main = "Full Model - All Wavelengths")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model - 650 wavelengths")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
plot(mod.compare.df2[,1], mod.compare.df2[,3], main = "Reduced Model - 4 bands")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
panes(1,1)
plot(mod.compare.df2[,1], mod.compare.df2[,2], main = "Full Model - All Wavelengths")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model - 650 wavelengths")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
plot(mod.compare.df2[,1], mod.compare.df2[,3], main = "Reduced Model - 4 bands")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
# Compare the prediction results from the three approaches
mod.compare.df2 = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv3.bands.pls,ncomp = 4))
panes(1,1)
plot(mod.compare.df2[,1], mod.compare.df2[,2], main = "Full Model - All Wavelengths", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model - 650 wavelengths", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
plot(mod.compare.df2[,1], mod.compare.df2[,3], main = "Reduced Model - 4 bands", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
coefplot(tsv1, ncomp = 1:4)
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
par(mfrow=c(1,1))
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,3]))
abline(0,1)
mod.compare.df = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv2.red,ncomp = 4))
par(mfrow=c(1,1))
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model")
abline(0,1)
#summary(lm(mod.compare.df[,1]~mod.compare.df[,3]))
panes(1,2)
plot(mod.compare.df[,1], mod.compare.df[,2], main = "Full Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model")
#summary(lm(mod.compare.df[,1]~mod.compare.df[,3]))
abline(0,1)
mod.compare.df2 = data.frame(mmtsv$TSV, predict(tsv1, ncomp = 4), predict(tsv3.bands.pls,ncomp = 4))
panes(1,1)
plot(mod.compare.df2[,1], mod.compare.df2[,2], main = "Full Model - All Wavelengths", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,2]))
abline(0,1)
plot(mod.compare.df[,1], mod.compare.df[,3], main = "Reduced Model - 650 wavelengths", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
plot(mod.compare.df2[,1], mod.compare.df2[,3], main = "Reduced Model - 4 bands", xlab = "Observed TSV", ylab = "Predicted TSV")
summary(lm(mod.compare.df2[,1]~mod.compare.df2[,3]))
abline(0,1)
par(mfrow=c(1,1))
loadingplot(tsv1, comps = 1:2, legendpos = "topright", labels = c(401:2500), xlab = "Wavelength (nm)")
abline(h=0)
loadingplot(tsv1, comps = 3:4, legendpos = "topright", labels = c(401:2500), xlab = "Wavelength (nm)")
abline(h=0)
R2(tsv1)
summary(tsv3.bands.lm)
tsv3.bands.pls = plsr(TSV ~ B1 + B2 + B3 + B4, data = tsv.bands.df) # PLS Model
R2(tsv3.bands.pls)
tsv.bands.df = data.frame(TSV = mmtsv$TSV, B1 = band1, B2 = band2, B3 = band3, B4 = band4) # Combine data together
# Linear Regression
tsv3.bands.lm = lm(TSV ~ B1 + B2 + B3 + B4, data = tsv.bands.df) # OLS Linear Model
summary(tsv3.bands.lm)
# PLS Regression
tsv3.bands.pls = plsr(TSV ~ B1 + B2 + B3 + B4, data = tsv.bands.df) # PLS Model
R2(tsv3.bands.pls)
R2(tsv3.bands.pls)
summary(tsv3.bands.lm)
summary(tsv3.bands.pls)
summary(tsv3.band.pls)
summary(tsv1)
summary(tsv3.bands.lm)
tsv3.bands.pls = plsr(TSV ~ B1 + B2 + B3 + B4, data = tsv.bands.df) # PLS Model
summary(tsv3.bands.pls)
par(mfrow=c(1,1))
loadingplot(tsv1, comps = 1:2, legendpos = "topright", labels = c(401:2500), xlab = "Wavelength (nm)")
abline(h=0)
loadingplot(tsv1, comps = 3:4, legendpos = "topright", labels = c(401:2500), xlab = "Wavelength (nm)")
abline(h=0)
R2(tsv3.bands.pls)
data.frame(Reduced = R2(tsv2.red)$val[1,1,1:11], Full = R2(tsv1)$val[1,1,1:11], FourBands = R2(tsv3.bands.pls)$val[1,1,1:11])
data.frame(Reduced = R2(tsv2.red)$val[1,1,1:11], Full = R2(tsv1)$val[1,1,1:11], FourBands = R2(tsv3.bands.pls)$val[1,1,1:11])
R2(tsv3.bands.pls)
R2(tsv3.bands.pls)$val
R2(tsv3.bands.pls)$val[1,1]
str(R2(tsv3.bands.pls)$val)
data.frame(Reduced = R2(tsv2.red)$val[1,1,1:11], Full = R2(tsv1)$val[1,1,1:11], FourBands = R2(tsv3.bands.pls)$val[1,1,1:5])
data.frame(Reduced = R2(tsv2.red)$val[1,1,1:11], Full = R2(tsv1)$val[1,1,1:11], FourBands = R2(tsv3.bands.pls)$val[1,1,1:5])
data.frame(FourBands = R2(tsv3.bands.pls)$val[1,1,1:5])
? R2
R2(tsv1, ncomp = 1)
R2(tsv1) # newdata here should point to a test-set, if available
data.frame(R2(tsv1)) # newdata here should point to a test-set, if available
data.frame(R2(tsv1)$val[1,1,1:11]) # newdata here should point to a test-set, if available
rmse.plot = plot(RMSEP(tsv1), legendpos = "topright", main = "LOO Validation Error")
plot(RMSEP(tsv2.red), legendpos = "topright", main = "Reduced Model")
RMSEP(tsv3.bands.pls)
class(RMSEP(tsv3.bands.pls))
RMSEP(tsv1)
RMSEP(tsv2.red)
RMSEP(tsv3.bands.pls)
library(pls)
? pls
? R2
View(reflectance)
? which
? merge
#set path to repository
if (file.exists('C:/Users/selmendorf/Documents/ATBDS/ATBDgit/organismalIPT')){
myPathToIPTrepo<-'C:/Users/selmendorf/Documents/ATBDS/ATBDgit/organismalIPT'
}
if (file.exists('C:/Users/cflagg/Documents/GitHub/organismalIPT')){
myPathToIPTrepo<-'C:/Users/cflagg/Documents/GitHub/organismalIPT'
}
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
chirp <- data.frame(mOrder = c(1,2,3,4,7),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
noodles$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird", noodles$protocol)
noodles
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
chirp <- data.frame(mOrder = c(1,2,3,4,7),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
chirp
noodles
noodles$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$protocol)
noodles
noodles$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder && noodles$plotType == 'base', "bird!", noodles$protocol)
noodles
noodles2 = noodles
# %in% is used to compare the two vectors
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$protocol)
noodles2
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$protocol)
noodles2 = noodles
noodles
noodles2
# target table to modify - row 3 has data that should not match your replacement criteria (not a base plot)
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
# inspect table
noodles
# source table to modify - row 5 has data that should not match replacement criteria (mOrder mismatch)
chirp <- data.frame(mOrder = c(1,2,3,4,7),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
# inspect table
chirp
noodles2 = noodles
# %in% is used to compare the two vectors
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$protocol)
# inspect new noodles table
noodles
noodles2
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles2$protocol)
# inspect new noodles table
noodles2
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$plotType)
# inspect new noodles table
noodles2
? ifelse
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles)
# inspect new noodles table
noodles2
# target table to modify - row 3 has data that should not match your replacement criteria (not a base plot)
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
# inspect table
noodles
# source table to modify - row 5 has data that should not match replacement criteria (mOrder mismatch)
chirp <- data.frame(mOrder = c(1,2,3,4,7),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
# inspect table
chirp
noodles2 = noodles
# %in% is used to compare the two vectors, along with &
# in plain english: if morton order of noodles is in the morton order of chirp
# AND noodles plot type is 'base',
# give it "bird!",
# else give it the original
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles2)
# inspect new noodles table
noodles2
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", as.character(noodles2)
# inspect new noodles table
noodles2
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", as.character(noodles2$protocol)
)
noodles2
# give it "bird!",
# else give it the original
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", as.character(noodles2$protocol))
# inspect new noodles table
noodles2
is.factor(noodles$protocol)
is.factor(noodles$plotType)
is.factor(noodles$mOrder)
# target table to modify - row 3 has data that should not match your replacement criteria (not a base plot)
noodles <- cbind(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"))
noodles
noodles$protocol
is.factor(noodles$protocol)
class(noodle)
class(noodles)
# target table to modify - row 3 has data that should not match your replacement criteria (not a base plot)
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"), stringsAsFactors=FALSE)
noodles
class(noodles$protocol)
# target table to modify - row 3 has data that should not match your replacement criteria (not a base plot)
noodles <- data.frame(mOrder = c(1,2,3,4,5),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"), stringsAsFactors=FALSE)
# inspect table
noodles
# source table to modify - row 5 has data that should not match replacement criteria (mOrder mismatch)
chirp <- data.frame(mOrder = c(1,2,3,4,7),
plotType = c("base","base","not","base","base"),
protocol = c("y","y","n","y","y"), stringsAsFactors=FALSE)
chirp
noodles2$protocol <- ifelse(noodles$mOrder %in% chirp$mOrder & noodles$plotType == 'base', "bird!", noodles$protocol)
# inspect new noodles table
noodles2
noodles3 = noodles
noodles3[noodles$plotType == 'base' & noodles$mOrder == chirp$mOrder] <- "bird!"
noodles3[noodles$plotType == 'base' & noodles$mOrder = chirp$mOrder] <- "bird!"
noodles3[noodles$plotType == 'base' && noodles$mOrder == chirp$mOrder] <- "bird!"
noodles3
noodles3$protocol[noodles$plotType == 'base' && noodles$mOrder == chirp$mOrder] <- "bird!"
noodles3
noodles3 = noodles
noodles3$protocol[noodles$plotType == 'base' && noodles$mOrder == chirp$mOrder] <- "bird!"
noodles3
############################################ An Alternative using indexing ############################################
noodles3 = noodles
noodles3$protocol[noodles$plotType == 'base' & noodles$mOrder == chirp$mOrder] <- "bird!"
noodles3
noodles
noodles3
library(plyr)
count(noodles$plotType)
ddply(noodles3, group = plotType, summarise, plotCount = count(plotType))
? ddply
ddply(noodles3, variables = plotType, summarise, plotCount = count(plotType))
ddply(noodles3, .(plotType), summarise, plotCount = count(plotType))
ddply(noodles3, .(plotType), summarise,
plotCount = count(protocol))
ddply(noodles3, .(plotType), summarise,
Count = count(protocol))
noodles3
count
ddply(noodles3, .(plotType), summarise,
Count = count(noodles3$protocol))
ddply(noodles3, .(plotType), summarize,
Count = count(noodles3$protocol))
count
nrow
ddply(noodles3, .(plotType), summarize,
Count = nrow(protocol))
noodles3
noodles3 = noodles
# use index and logical operators
noodles3$protocol[noodles$plotType == 'base' & noodles$mOrder == chirp$mOrder] <- "bird"
noodles3
ddply(noodles3, .(plotType), summarize,
Count = nrow(protocol))
ddply(noodles3, .(plotType), summarize,
Count = count(protocol))
ddply(noodles3, .(plotType), summarize,
Countz = count(protocol))
d_ply(noodles3, .(plotType), summarize,
Countz = count(protocol))
noodles3$birdCount = runif(5)
noodles3
noodles3$birdCount = runif(5)*100
noodles3
int
integer
? integer
noodles3$birdCount = integer(runif(5)*100)
noodles3$birdCount = round(runif(5)*100,0)
noodles3
noodles3$birdCount = round(runif(5)*100,0)
noodles3
ddply(noodles3, .(plotType), summarize, birdTotal = sum(birdCount))
install.packages("plyr")
Sys.which('pdflatex')
do.call(sum, list(c(1,2,4,1,2), na.rm = TRUE))
lapply(c(1,2,4,1,2), function(x) x + 1)
getMethod
getMethod("tapply")
getMethod(tapply)
tapply
mapply(rep, 1:4, 4:1)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
ddply(ChickWeight, .(Time,Diet), summarise,
avgWeight = mean(weight),
sdWeight = sd(weight))
library(plyr)
library(dplyr)
library(stringr)
library(knitr)
ddply(ChickWeight, .(Time,Diet), summarise,
avgWeight = mean(weight),
sdWeight = sd(weight))
dirname()
head(ddply(ChickWeight, .(Time,Diet),mutate, # notice it is now 'mutate'
avgWeight = mean(weight), # average weight per chick
sdWeight = sd(weight), # stdev
diffWeight = weight - avgWeight),20)
setwd("../Documents/GitHub/codingSupportGroup/dataWrangling/plyr_session")
setwd("../Documents/GitHub/codingSupportGroup/dataWrangling/plyr_session")
setwd("../Documents/GitHub/codingSupportGroup/dataWrangling/plyr_session")
##unsophisticated, simplified method to rbind, not practical for combining many files
d01<-read.csv('vst_perindividual_D01.csv')
d02<-read.csv('vst_perindividual_D02.csv')
d03<-read.csv('vst_perindividual_D03.csv')
d03Num<-read.csv('vst_perindividual_D03Number.csv')
d03Order<-read.csv('vst_perindividual_D03Order.csv')
# predict rows in merged dataset
(nrow(d01))+(nrow(d02))+(nrow(d03))
ncol(d01)
ncol(d02)
ncol(d03)
dAll<-rbind(d01, d02, d03)
head(dAll)
tail(dAll)
#check
dim(dAll)
pathtocsvs<-getwd()
myPrefix<-'vst_perind'
fileList<-list.files(pathtocsvs)
vstfiles<-fileList[grepl(myPrefix, fileList)]
vstfiles
dAll2 = ldply(vstfiles, function(x){
t <- read.csv(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary object
return(t1)
}
)
dim(dAll2)
tail(dAll2)
fileList
vstfiles
tail(dAll2)
fileList
fileList<-list.files(pathtocsvs)
vstfiles<-fileList[grepl(myPrefix, fileList)]
fileList
fileList<-list.files(pathtocsvs)
vstfiles<-fileList[grepl(myPrefix, fileList)]
fileList
mySuffix<-'_batch'
vstfiles<-fileList[grepl(myPrefix, fileList) | grepl(mySuffix,fileList)]
vstfiles
vst <- tbl_df(dAll)
#take a look
colnames(vst)
#remove dataframe
rm(dAll)
```
vstSel<-select(vst, plotID)
dim(vstSel)
colnames(vstSel)
colnames(vst)
vstSel<-select(vst, date:stemAzimuth)
#Check it
dim(vstSel)
colnames(vstSel)
vstSel<-select(vst, -date:stemAzimuth)
#Check it
dim(vstSel)
colnames(vstSel)
vstSel<-select(vst, date:stemAzimuth)
#Check it
dim(vstSel)
colnames(vstSel)
str(vstSel)
vstSel<-select(vst, -date)
#Check it
str(vstSel)
vstSel<-select(vst, !date)
#Check it
str(vstSel)
vstSel<-select(vst, -date)
#Check it
str(vstSel)
vstfil<-filter(vst, pointID == '41')
dim(vstfil)
head(vstfil)
str(vstfil)
vstfil<-filter(vst, pointID == 41)
str(vstfil)
vstfil<-filter(vst, pointID <= '41')
str(vstfil)
vstfil<-filter(vst, pointID <= 41)
str(vstfil)
vstmut<-mutate(vst, )
str(vstmut)
vstfil<-filter(vst, pointID <= 41 & plotID == 'HARV_043')
str(vstfil)
vstfil<-filter(vst, pointID <= 41, plotID == 'HARV_043')
str(vstfil)
type
class
class(vstfil)
vstfil<-filter(vst, pointID <= 41, plotID == 'HARV_043')
str(vstfil)
vstfil<-filter(vst, pointID <= 41 &  plotID == 'HARV_043')
str(vstfil)
summary(vstfil$plotID)
vstfil<-filter(vst, pointID <= 41,  plotID == 'HARV_043')
str(vstfil)
summary(vstfil$plotID)
vstfil<-filter(vst, pointID == 31 | pointID == 41,  plotID == 'HARV_043')
str(vstfil)
summary(vstfil$plotID)
vstfil<-filter(vst, pointID == 31 | pointID == 41 & plotID == 'HARV_043')
str(vstfil)
summary(vstfil$plotID)
vstmut<-mutate(vst, uid1000 = uid*1000)
str(vstmut)
transform
? transform
? mutate
vstmut<-mutate(vst, uid1000 = uid*1000, uid100 = uid1000/10)
str(vstmut)
? summarize
vstSum = summarise(vst, count = length(pointID))
str(vstSum)
? mutate
mutate(vstSum, newCount = count*100)
vstSum
rename(vst, chicken = uid)
rename(vst, chicken = uid, soup = date)
rename(vst, chicken = uid, soup = date, for = plotID)
rename(vst, chicken = uid, soup = date, forThe = plotID)
names(vst)
names(vst)
? rename
rename(vst, chicken = uid, soup = date, forThe = plotID)
names(vst)
vst <- tbl_df(dAll)
dAll<-rbind(d01, d02, d03)
vst <- tbl_df(dAll)
rename(vst, chicken = uid, soup = date, forThe = plotID)
? group_by
group_by(mtcars, vs, am)
group_by(mtcars, vsam = vs + am)
mtcars
? order_by
library(swirl)
