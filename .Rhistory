#print(tmp)
for(j in 1:length(tmp)) {
xy.rando.subplots[i,j] <- subplot.coords[tmp[j],j]
}
}
# file for coords within subplot 21
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(1,2)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot21.csv", sep="") )
# file for coords within subplot 23
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(3,4)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot23.csv", sep="") )
# file for coords within subplot 39
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(7,8)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot39.csv", sep="") )
# file for coords within subplot 41
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(5,6)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot41.csv", sep="") )
### C. Randomly select subplots to sample for required number of bouts
## ---> first with set seed
rando.bout.rows <- matrix(NA,tot.bouts, 3)
char2seed(1, set=TRUE); for(i in 1:tot.bouts) {
rando.bout.rows[i,] <- sample(c(21,23,39,41), size=3, replace=FALSE)
}
colnames(rando.bout.rows) <- c("Subplot", "Subplot", "Subplot")
write.csv(rando.bout.rows, paste(plotID[y], "_subplots.csv", sep=""),
row.names=FALSE)
}
domain <- "D02"
siteCode <- "SERC"
module <- "bgc"
plotID <- subplotList(siteCode, module)   # assign plotIDs to object
plotNum <- substring(plotID,6,8)
plotNum <- as.integer(plotNum)
setwd(paste("/Users/lstanish/Git_Files/neonPlantSampling/soils_bgcAndMicrobes/",
domain, "/", siteCode, sep="") )
site_coords <- matrix(data=NA, nrow=tot.bouts, ncol=length(plotNum))
colnames(site_coords) <- plotID
for (y in 1:length(plotID)) {
## A. Generate random xy row IDs for each subplot. Char2seed allows you to set a starting value for randomization
#  so that numbers are repeatable
xy.subplot.rows <- matrix(NA,tot.row,length(subplot) )
char2seed(plotNum[y], set=TRUE); for(i in 1:length(subplot) ) {
xy.subplot.rows[,i] <- sample(1:nrow(subplot.coords), size=as.integer(tot.row),
replace=FALSE)
}
### B. Generate for loop to pull out random XYs from all subplots using randomly
### selected row IDs
xy.rando.subplots <- data.frame(matrix(NA,tot.row,length(subplot)*2) )
colnames(xy.rando.subplots) <- c("21x","21y","23x","23y","41x","41y","39x","39y")
for(i in 1:tot.row) {
tmp <- c(rep(xy.subplot.rows[i,1], 2),rep(xy.subplot.rows[i,2], 2),rep(xy.subplot.rows[i,3], 2),
rep(xy.subplot.rows[i,4], 2) )
#print(tmp)
for(j in 1:length(tmp)) {
xy.rando.subplots[i,j] <- subplot.coords[tmp[j],j]
}
}
# file for coords within subplot 21
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(1,2)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot21.csv", sep="") )
# file for coords within subplot 23
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(3,4)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot23.csv", sep="") )
# file for coords within subplot 39
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(7,8)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot39.csv", sep="") )
# file for coords within subplot 41
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(5,6)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot41.csv", sep="") )
### C. Randomly select subplots to sample for required number of bouts
## ---> first with set seed
rando.bout.rows <- matrix(NA,tot.bouts, 3)
char2seed(1, set=TRUE); for(i in 1:tot.bouts) {
rando.bout.rows[i,] <- sample(c(21,23,39,41), size=3, replace=FALSE)
}
colnames(rando.bout.rows) <- c("Subplot", "Subplot", "Subplot")
write.csv(rando.bout.rows, paste(plotID[y], "_subplots.csv", sep=""),
row.names=FALSE)
}
domain <- "D14"
siteCode <- "SRER"
module <- "bgc"
plotID <- subplotList(siteCode, module)   # assign plotIDs to object
plotNum <- substring(plotID,6,8)
plotNum <- as.integer(plotNum)
setwd(paste("/Users/lstanish/Git_Files/neonPlantSampling/soils_bgcAndMicrobes/",
domain, "/", siteCode, sep="") )
site_coords <- matrix(data=NA, nrow=tot.bouts, ncol=length(plotNum))
colnames(site_coords) <- plotID
for (y in 1:length(plotID)) {
## A. Generate random xy row IDs for each subplot. Char2seed allows you to set a starting value for randomization
#  so that numbers are repeatable
xy.subplot.rows <- matrix(NA,tot.row,length(subplot) )
char2seed(plotNum[y], set=TRUE); for(i in 1:length(subplot) ) {
xy.subplot.rows[,i] <- sample(1:nrow(subplot.coords), size=as.integer(tot.row),
replace=FALSE)
}
### B. Generate for loop to pull out random XYs from all subplots using randomly
### selected row IDs
xy.rando.subplots <- data.frame(matrix(NA,tot.row,length(subplot)*2) )
colnames(xy.rando.subplots) <- c("21x","21y","23x","23y","41x","41y","39x","39y")
for(i in 1:tot.row) {
tmp <- c(rep(xy.subplot.rows[i,1], 2),rep(xy.subplot.rows[i,2], 2),rep(xy.subplot.rows[i,3], 2),
rep(xy.subplot.rows[i,4], 2) )
#print(tmp)
for(j in 1:length(tmp)) {
xy.rando.subplots[i,j] <- subplot.coords[tmp[j],j]
}
}
# file for coords within subplot 21
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(1,2)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot21.csv", sep="") )
# file for coords within subplot 23
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(3,4)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot23.csv", sep="") )
# file for coords within subplot 39
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(7,8)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot39.csv", sep="") )
# file for coords within subplot 41
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(5,6)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot41.csv", sep="") )
### C. Randomly select subplots to sample for required number of bouts
## ---> first with set seed
rando.bout.rows <- matrix(NA,tot.bouts, 3)
char2seed(1, set=TRUE); for(i in 1:tot.bouts) {
rando.bout.rows[i,] <- sample(c(21,23,39,41), size=3, replace=FALSE)
}
colnames(rando.bout.rows) <- c("Subplot", "Subplot", "Subplot")
write.csv(rando.bout.rows, paste(plotID[y], "_subplots.csv", sep=""),
row.names=FALSE)
}
domain <- "D08"
siteCode <- "TALL"
module <- "bgc"
plotID <- subplotList(siteCode, module)   # assign plotIDs to object
plotNum <- substring(plotID,6,8)
plotNum <- as.integer(plotNum)
setwd(paste("/Users/lstanish/Git_Files/neonPlantSampling/soils_bgcAndMicrobes/",
domain, "/", siteCode, sep="") )
site_coords <- matrix(data=NA, nrow=tot.bouts, ncol=length(plotNum))
colnames(site_coords) <- plotID
for (y in 1:length(plotID)) {
## A. Generate random xy row IDs for each subplot. Char2seed allows you to set a starting value for randomization
#  so that numbers are repeatable
xy.subplot.rows <- matrix(NA,tot.row,length(subplot) )
char2seed(plotNum[y], set=TRUE); for(i in 1:length(subplot) ) {
xy.subplot.rows[,i] <- sample(1:nrow(subplot.coords), size=as.integer(tot.row),
replace=FALSE)
}
### B. Generate for loop to pull out random XYs from all subplots using randomly
### selected row IDs
xy.rando.subplots <- data.frame(matrix(NA,tot.row,length(subplot)*2) )
colnames(xy.rando.subplots) <- c("21x","21y","23x","23y","41x","41y","39x","39y")
for(i in 1:tot.row) {
tmp <- c(rep(xy.subplot.rows[i,1], 2),rep(xy.subplot.rows[i,2], 2),rep(xy.subplot.rows[i,3], 2),
rep(xy.subplot.rows[i,4], 2) )
#print(tmp)
for(j in 1:length(tmp)) {
xy.rando.subplots[i,j] <- subplot.coords[tmp[j],j]
}
}
# file for coords within subplot 21
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(1,2)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot21.csv", sep="") )
# file for coords within subplot 23
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(3,4)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot23.csv", sep="") )
# file for coords within subplot 39
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(7,8)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot39.csv", sep="") )
# file for coords within subplot 41
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(5,6)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot41.csv", sep="") )
### C. Randomly select subplots to sample for required number of bouts
## ---> first with set seed
rando.bout.rows <- matrix(NA,tot.bouts, 3)
char2seed(1, set=TRUE); for(i in 1:tot.bouts) {
rando.bout.rows[i,] <- sample(c(21,23,39,41), size=3, replace=FALSE)
}
colnames(rando.bout.rows) <- c("Subplot", "Subplot", "Subplot")
write.csv(rando.bout.rows, paste(plotID[y], "_subplots.csv", sep=""),
row.names=FALSE)
}
domain <- "D04"
siteCode <- "GUAN"
module <- "bgc"
plotID <- subplotList(siteCode, module)   # assign plotIDs to object
plotNum <- substring(plotID,6,8)
plotNum <- as.integer(plotNum)
dir.create(paste("/Users/lstanish/Git_Files/neonPlantSampling/soils_bgcAndMicrobes/",
domain, "/", siteCode, sep="") )
setwd(paste("/Users/lstanish/Git_Files/neonPlantSampling/soils_bgcAndMicrobes/",
domain, "/", siteCode, sep="") )
site_coords <- matrix(data=NA, nrow=tot.bouts, ncol=length(plotNum))
colnames(site_coords) <- plotID
for (y in 1:length(plotID)) {
## A. Generate random xy row IDs for each subplot. Char2seed allows you to set a starting value for randomization
#  so that numbers are repeatable
xy.subplot.rows <- matrix(NA,tot.row,length(subplot) )
char2seed(plotNum[y], set=TRUE); for(i in 1:length(subplot) ) {
xy.subplot.rows[,i] <- sample(1:nrow(subplot.coords), size=as.integer(tot.row),
replace=FALSE)
}
### B. Generate for loop to pull out random XYs from all subplots using randomly
### selected row IDs
xy.rando.subplots <- data.frame(matrix(NA,tot.row,length(subplot)*2) )
colnames(xy.rando.subplots) <- c("21x","21y","23x","23y","41x","41y","39x","39y")
for(i in 1:tot.row) {
tmp <- c(rep(xy.subplot.rows[i,1], 2),rep(xy.subplot.rows[i,2], 2),rep(xy.subplot.rows[i,3], 2),
rep(xy.subplot.rows[i,4], 2) )
#print(tmp)
for(j in 1:length(tmp)) {
xy.rando.subplots[i,j] <- subplot.coords[tmp[j],j]
}
}
# file for coords within subplot 21
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(1,2)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot21.csv", sep="") )
# file for coords within subplot 23
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(3,4)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot23.csv", sep="") )
# file for coords within subplot 39
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(7,8)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot39.csv", sep="") )
# file for coords within subplot 41
sp.tmp <- matrix(data="", nrow=nrow(xy.rando.subplots), ncol=2,
dimnames=list(NULL,c("Status", "Date")))
write.csv(cbind(xy.rando.subplots[,c(5,6)], sp.tmp) , paste(plotID[y],
"_sls_coords_subplot41.csv", sep="") )
### C. Randomly select subplots to sample for required number of bouts
## ---> first with set seed
rando.bout.rows <- matrix(NA,tot.bouts, 3)
char2seed(1, set=TRUE); for(i in 1:tot.bouts) {
rando.bout.rows[i,] <- sample(c(21,23,39,41), size=3, replace=FALSE)
}
colnames(rando.bout.rows) <- c("Subplot", "Subplot", "Subplot")
write.csv(rando.bout.rows, paste(plotID[y], "_subplots.csv", sep=""),
row.names=FALSE)
}
title: "README"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
# SoilsCharacterization
### This repository is for communicating and sharing documents for the Soil Initial Characterization Contract
##
>>>>>>> Stashed changes
>>>>>>> 781d8957181a22b2da69de802b550d4b52ae91e3
vs = read.csv("C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
vs2 <- filter(vs, species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))
vs = read.csv("C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
vs2 <- filter(vs, species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))
names(vs)
vs$status
filter(vs, species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))
filter(vs, species %in% c("Qula", "Pipa") & status %in% c("Alive", "Dead"))
filter(vs, species %in% c("Qula", "Pipa") && status %in% c("Alive", "Dead"))
filter(vs, species %in% c("Qula", "Pipa") | status %in% c("Alive", "Dead"))
filter(vs, species %in% c("Qula", "Pipa"))
vs = read.csv("C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
vs
vs <- read.csv("C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
filter(vs, species %in% c("Qula", "Pipa"))
filter(vs, species == "Qula")
? filter
library(dplyr)
library(ggplot2) # then run this to activate the package
vs2 <- filter(vs, species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))
vs2_other <- filter(vs, !(species %in% c("Qula", "Pipa")))
ggplot(vs2, aes(x=easting, y = northing, color = species)) + geom_point(aes(size = canopyrad.m)) + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125)) + theme_bw() + geom_segment(aes(xend = E[1,1],yend = N[1]))
g1  <- ggplot(vs2, aes(x=easting, y = northing, color = species)) + geom_point(aes(size = canopyrad.m))
g1
g1  <- g1 + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125))
g1
g1  <- ggplot(vs2, aes(x=easting, y = northing, color = species))  # store as an object
g1
g1
# limit the axes - not a huge difference
g1  <- g1 + geom_point(aes(size = canopyrad.m)) + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125)) # add new properties to the object
g1
g1<- g1 + theme_bw() + geom_segment(aes(xend = E[1,1],yend = N[1])) # kill the gray grid
g1
g2.facet <- g1 + facet_wrap(~species)
g2.facet <- g1 + geom_point(aes(size = canopyrad.m)) geom_point + facet_wrap(~species)
g2.facet <- g1 + geom_point(aes(size = canopyrad.m)) + facet_wrap(~species)
g2.facet
g1  <- ggplot(vs2, aes(x=easting, y = northing, color = species))  # define the primary elements of your graph
g1 # think of this as a blank canvas...
# now declare the geometry and the axis limits
g2  <- g1 + geom_point(aes(size = canopyrad.m)) + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125)) # add new properties to the object
g2 # call again
# Now tweak the graphical properties
g2.facet <- g1 + geom_point(aes(size = canopyrad.m)) + facet_wrap(~species)
g2.facet
g3.facet <- g1 + geom_point(aes(size = canopyrad.m)) + facet_wrap(~status+species)
g3.facet
# build the base graphic, assign it to a callable object
g1  <- ggplot(vs2, aes(x=easting, y = northing, color = species))  # define the primary elements of your graph
# g1 # uncomment this and run; think of this as a blank canvas for later...
# now declare the geometry and the axis limits
g2  <- g1 + geom_point(aes(size = canopyrad.m)) + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125)) # add new properties to the object
g2 # call again
# Now tweak the graphical properties
g2<- g2 + theme_bw() # kill the gray grid
g2
library(scatterplot3d)
s3d = scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type="h", main="Tree and shrub height within OSBS Tower airshed", xlab="Easting (m)", ylab="Northing (m)", zlab="Tree height (m)", pch=21, color="#005826", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))
s3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type="h", pch=19, col="#41614F")
s3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type="h", pch=19, col="#945232")
s3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type="h", pch=21, col="#f26522")
s3d$points3d(other$easting, other$northing, other$height.m, type="h", pch=19)
legend(s3d$xyz.convert(403920,3285050,15), pch=21,
col=c("#005826", "#005826", "#f26522", "#f26522", "#000000"),
pt.bg=c("#FFFFFF", "#005826", "#FFFFFF", "#945232", "gray60"),
legend=c("Pipa (live)", "Pipa (dead)", "Qula (live)", "Qula (dead)", "Other"),
cex=0.8)
library(scatterplot3d)
lines(E, N, lty=2)
pipa.l = vs[which(vs$species=='Pipa' & !vs$status=='Dead'),]
pipa.d = vs[which(vs$species=='Pipa' & vs$status=='Dead'),]
qula.l = vs[which(vs$species=='Qula' & !vs$status=='Dead'),]
qula.d = vs[which(vs$species=='Qula' & vs$status=='Dead'),]
other = vs[!vs$species %in% c("Pipa","Qula"),]
s3d = scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type="h", main="Tree and shrub height within OSBS Tower airshed", xlab="Easting (m)", ylab="Northing (m)", zlab="Tree height (m)", pch=21, color="#005826", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))
s3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type="h", pch=19, col="#41614F")
s3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type="h", pch=19, col="#945232")
s3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type="h", pch=21, col="#f26522")
s3d$points3d(other$easting, other$northing, other$height.m, type="h", pch=19)
legend(s3d$xyz.convert(403920,3285050,15), pch=21,
col=c("#005826", "#005826", "#f26522", "#f26522", "#000000"),
pt.bg=c("#FFFFFF", "#005826", "#FFFFFF", "#945232", "gray60"),
legend=c("Pipa (live)", "Pipa (dead)", "Qula (live)", "Qula (dead)", "Other"),
cex=0.8)
g3.facet
g3.facet <- g1 + geom_point(aes(size = height.m)) + facet_wrap(~status+species)
g3.facet
s3d
s3d
scatterplot3d
scatterplot3d(s3d)
scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type="h", main="Tree and shrub height within OSBS Tower airshed", xlab="Easting (m)", ylab="Northing (m)", zlab="Tree height (m)", pch=21, color="#005826", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))
s3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type="h", pch=19, col="#41614F")
s3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type="h", pch=19, col="#945232")
s3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type="h", pch=21, col="#f26522")
s3d$points3d(other$easting, other$northing, other$height.m, type="h", pch=19)
g2 + geom_segment(aes(xend = E[1,1],yend = N[1]))
E = c(403835.04, 403876.8, 403919.41, 403963.86)
N = c(3285052.24, 3285080.38, 3285104.02, 3285129.41)
g2 + geom_segment(aes(xend = E[1],yend = N[1]))
? geom_segment
g2 + geom_segment(aes(x =E[1] , xend = E[2],y = N[1] , yend = N[2]))
g2 + geom_segment(aes(x =E[1] , xend = E[2],y = N[1] , yend = N[2])) +
geom_segment(aes(x =E[3] , xend = E[4],y = N[3] , yend = N[4]))
g2 + geom_segment(aes(x =E[1] , xend = E[2],y = N[1] , yend = N[2])) +
geom_segment(aes(x =E[2] , xend = E[3],y = N[2] , yend = N[3])) +
geom_segment(aes(x =E[3] , xend = E[4],y = N[3] , yend = N[4]))
g2 + geom_segment(aes(x =E[1] , xend = E[2],y = N[1] , yend = N[2]), colour = "black") +
# a bit clunky in this regard
g2 + geom_segment(aes(x =E[1] , xend = E[2],y = N[1] , yend = N[2]), colour = "black") +
geom_segment(aes(x =E[2] , xend = E[3],y = N[2] , yend = N[3]), colour = "black") +
geom_segment(aes(x =E[3] , xend = E[4],y = N[3] , yend = N[4]), color = "black")
```
e
E
trans <- data.frame(E,N)
trans
g2 + geom_segment(aes(x = trans[,1],y = trans[,2]), colour = "black")
g2
trans[,1]
g2 + geom_path(aes(x = trans[,1],y = trans[,2]), colour = "black")
g2 + geom_line(aes(x = trans[,1],y = trans[,2]), colour = "black")
g2 + geom_line(trans, aes(x = trans[,1],y = trans[,2]), colour = "black")
g2 + geom_line(data = trans[1,], colour = "black")
trans <- data.frame(easting = E,northing = N)
g2 + geom_line(data = trans[1,], colour = "black")
g2<- g2 + theme_classic() # kill the gray grid
g2
d1 <- data.frame(x1=rep(1:10,3), y1=rnorm(10*3), g1=gl(3,10,labels=letters[1:3]))
d2 <- data.frame(x2=rep(1:10,3), y2=rnorm(10*3), g2=gl(3,10, labels=letters[4:6]))
ggplot() +
geom_line(aes(x1, y1, colour=g1), d1) +
geom_line(aes(x2, y2, colour=g2), d2)
d1
d2
trans <- data.frame(easting = E,northing = N)
g2 + geom_line(aes(easting,northing),data=trans, colour = "black")
? geom_point
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing, data=trans, color = "gray", shape = ".")# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing, data=trans, color = "gray", shape = ".")# now add it
)
trans <- data.frame(easting = E,northing = N) # turn the transect line into a data frame
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing), data=trans, color = "gray")# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing), data=trans, color = "black", size = 5)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing), data=trans, color = "black", size = 3)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing), data=trans, color = "black", size = 3, shape = 2)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") + geom_point(aes(easting,northing), data=trans, color = "black", size = 3, shape = 3)# now add it
ggplot(mtcars, aes(mpg,wt)) + geom_smooth(method="lm") + geom_point() + theme_classic()
vs  %>% filter(vs, species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))  %>%  ggplot(aes(x=easting, y = northing, color = species)) + facet_wrap(~status+species)
vs
vs  %>% filter(species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))  %>%  ggplot(aes(x=easting, y = northing, color = species)) + facet_wrap(~status+species)
vs  %>%
filter(species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))  %>%
ggplot(aes(x=easting, y = northing, color = species)) +
facet_wrap(~status+species) +
geom_point(aes(size = height.m))
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") +
geom_point(aes(easting,northing), data=trans, color = "black", size = 3, shape = 13)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") +
geom_point(aes(easting,northing), data=trans, color = "black", size = 5, shape = 13)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") +
geom_point(aes(easting,northing), data=trans, color = "green", size = 5, shape = 13)# now add it
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") +
geom_point(aes(easting,northing), data=trans, color = "darkgreen", size = 5, shape = 13)# now add it
? floor
? geom_hist
? geom_histogram
m <- ggplot(movies, aes(x=rating))
m + geom_histogram()
m + geom_histogram() + geom_density()
m + geom_histogram(aes(weight = votes))
movies
head(movies)
? hist
hist(movies$rating)
m <- ggplot(movies, aes(x=rating))
m + geom_histogram() + geom_density()
head(movies)
hist(movies$rating)
m <- ggplot(movies, aes(x=rating))
m
m + geom_histogram() + facet_wrap(~year)
m + geom_histogram() + facet_wrap(~year[,year>=1992])
m
for (year in movies){
hist(movies$rating)
}
m + geom_histogram() + facet_wrap(~filter(year > 1990))
? geom_point
p <- ggplot(mtcars, aes(mpg, wt))
p
p + geom_point()
vs = read.csv("../Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
getwd()
vs = read.csv("../plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
vs = read.csv("C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv", header=TRUE)
? pch
? coord_cartesian
g2 + geom_line(aes(easting,northing),data=trans, colour = "black") +
geom_point(aes(easting,northing), data=trans, color = "darkgreen", size = 5, shape = "circle")# now add it
? geom_point
plot(x = 1:26, y = 1:26, pch = 1:26)
plot(x = 1:100, y = 1:100, pch = 1:100)
? scatterplot3d
s3d = scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type="h", main="Tree and shrub height within OSBS Tower airshed", xlab="Easting (m)", ylab="Northing (m)", zlab="Tree height (m)", pch=21, color="#005826", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))
s3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type="l", pch=19, col="#41614F")
s3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type="l", pch=19, col="#945232")
s3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type="l", pch=21, col="#f26522")
s3d$points3d(other$easting, other$northing, other$height.m, type="l", pch=19)
s3d = scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type="h", main="Tree and shrub height within OSBS Tower airshed", xlab="Easting (m)", ylab="Northing (m)", zlab="Tree height (m)", pch=21, color="#005826", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))
s3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type="p", pch=19, col="#41614F")
s3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type="p", pch=19, col="#945232")
s3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type="p", pch=21, col="#f26522")
s3d$points3d(other$easting, other$northing, other$height.m, type="p", pch=19)
g1  <- ggplot(vs2, aes(x=easting, y = northing, color = species))  # define the primary elements of your graph
g1
? coord_cartesian
? scale_x_continuous
# in one go - one dataset call
vs  %>%
filter(species %in% c("Qula", "Pipa"), status %in% c("Alive", "Dead"))  %>%
ggplot(aes(x=easting, y = northing, color = species)) +
facet_wrap(~status+species) +
geom_point(aes(size = height.m))
