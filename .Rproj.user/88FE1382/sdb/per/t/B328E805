{
    "contents" : "---\ntitle: \"Graphing with ggplot2: a brief overview\"\nauthor: \"Cody Flagg\"\ndate: \"Wednesday, May 27, 2015\"\noutput:\n  html_document:\n    theme: spacelab\n    number_sections: yes\n    toc: yes\n---\n\n**Goal:** A brief overview of the philosophy behind ggplot, and a demonstration of its utility and power. \n\n```{r echo=FALSE, results='hide',eval=FALSE}\n# notes\n#   \tSyntax - graphing as a language\n# \t\tConstruction - write a sentence, build a plot\n# \t\t\tqplot()\n# \t\t\tggplot()\n# \t\tOptions\n# \t\t\tKill the gray grid\n# \t\t\tPart I - different types of graphs (specified by geom_'type')\n# \t\t\tPart II - different graph options (regression lines, facets, etc.)\n#     Being lazy is good: cheatsheets, R cookbook\n# \t\tMake it a function (Part II): http://bactra.org/weblog/1064.html\n#     Abstraction >> Refactoring\n#     TDD: http://chimera.labs.oreilly.com/books/1234000000754/ch04.html\n#     Minimalism in your coding life\n\n```\n\n# ggplot2 Outline\n1. Grammar of Graphics\n2. Syntax\n3. Basics - qplot()\n4. 2010 Pathfinder Data with ggplot\n\n# Grammar of Graphics\n\n##Theory and Philosophy\n\n![text](http://www.science-craft.com/wp-content/uploads/2014/06/ggplot-2.png\"Grammar of Graphics\")\n\n** Well, Duh! **\n\n** The point here is the formalization of graphing, the clarity that formalities bring coaxs art. ** \n\n### Grammar of Graphics: Finding Meaning in the Hadley-verse\n\n* \"An __abstraction__ which makes thinking, reasoning, and communicating (graphics) easier.\"\n* R as a Language > use R to build coherent structures (sentences = single lines, paragraphs = functions, essays = workflow)\n    * Not just using tools/functions as a _means to an end_, but an _end in itself_: the code, the grammar matters as much as the output.   \n* But also...__be lazy__. Lazy is smart. Thinking less about little, uninteresting problems allows for more abstraction and complexity in problem solving. \n* Finally...web resources to jumpstart!\n    * (ggplot2 cheatsheet) http://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf\n    * (R Cookbook) http://www.cookbook-r.com/Graphs/\n\n# Syntax in the Hadley-verse: ggplot2\n\n* __Functionally__ : build every graph with the same few components:\n    * `data`\n    * geometries (or `geom`, visual marks that represent data) \n        * Map variables to `aesthetic` (or `aes`) properties in the `geom`: size, color, x, y\n    * `coordinate system` \n* __Additions__ more options are added via additional function calls, referred to as __layers__, rather than being embedded in one long call\n* __Similarities__ : the \"Hadley-verse\" of dplyr, plyr, tidyr, reshape2 packages \n    * e.g. \"function(.data, .group, .arguments, ...)\"\n    * Why is this important?\n      * Connectivity (pipe your problems)\n      * Reducing cluttered thought\n      * Cleaner workflow = better work\n\n\n# Basics\n\n```{r message=FALSE,warning=FALSE}\n# install.packages(\"ggplot2\") # run this if you don't have ggplot2 installed\nlibrary(ggplot2) # then run this to activate the package\nlibrary(dplyr)\n\n# base R plotting\nplot(mpg ~ wt, data = mtcars)\n\n# quick and simple plotting function; not for finely tuning figures\n# why use qplot? It's a one line function that requires no additional layering\nqplot(mpg, wt, data = mtcars, geom = c(\"point\", \"smooth\"))\n\n# Graduating to full controls - using ggplot()\n# adding a smoothing layer for a regression, point layer, and controlling the thematic background layer\nggplot(mtcars, aes(mpg,wt)) + geom_smooth(method=\"lm\") + geom_point() + theme_classic()\n```\n\n## Revisiting 2010 Pathfinder Data\n\n* dplyr the target species and status\n\n```{r}\nvs <- read.csv(\"C:/Users/cflagg/Documents/GitHub/codingSupportGroup/plottingAndPublication/inputVstPathfinder2010.csv\", header=TRUE)\n\n# create target vectors to capture everything in one call\n# or do it in one\nvs2 <- filter(vs, species %in% c(\"Qula\", \"Pipa\"), status %in% c(\"Alive\", \"Dead\"))\nvs2_other <- filter(vs, !(species %in% c(\"Qula\", \"Pipa\"))) # species that are \"not in\" list \"Qula\", \"Pipa\"\n\n# a functionable alternative?\n# Set search term arguments\n# target_sp = c(\"Pipa\", \"Qula\")\n# target_st = c(\"Dead\",\"Alive\")\n# \n# iterate over filters and pipes\n# vs2 <- filter(vs, species %in% target_sp, status %in% target_st)\n#'%ni%' <- Negate('%in%') # We are the knights who say \"Ni!\" - a \"not in\" logical operator (not a base R function)\n# vs2_other <- filter(vs, species %ni% target_sp) # filter \"It!\"\n```\n\n## Figure 1 from VST plotting\n```{r}\nE = c(403835.04, 403876.8, 403919.41, 403963.86)\nN = c(3285052.24, 3285080.38, 3285104.02, 3285129.41)\n\n# build the base graphic, assign it to a callable object\ng1  <- ggplot(vs2, aes(x=easting, y = northing, color = species))  # define the primary elements of your graph\n# g1 # uncomment this and run; think of this as the beginning of a \"canvas\" for later...\n\n# now declare the geometry and the axis limits\ng2  <- g1 + geom_point(aes(size = canopyrad.m)) + coord_cartesian(xlim=c(403830,403945), ylim=c(3285045,3285125))  # add new properties to the object\ng2 # call again\n\n# Now tweak the graphical properties\ng2<- g2 + theme_classic() # kill the gray background and grid, one liner\ng2\n```\n\n\n### Add the transect from GPS data\n\n```{r}\n# how about a \"one-liner\": \ntrans <- data.frame(easting = E,northing = N) # turn the transect line into a data frame\n\ng2 + geom_line(aes(easting,northing),data=trans, colour = \"black\") + \n  geom_point(aes(easting,northing), data=trans, color = \"darkgreen\", size = 5, shape = 13) now add it\n```\n\n\n## Why Build A Canvas?\n\n* Back to Grammar: Abstraction >> simple Refactoring\n    * __Abstraction__: a way of managing complexity. Identify a reoccurring activity, turn it into a function, method, class, or _language_, and give it a name. \n    * _Be Lazy_: Let machines do boring stuff (computation); let people do cool stuff (thinking, analysis, design).\n    * __Refactoring__: Reduce repetitive code activities by creating a function. \n* Applied to ggplot:\n    * Use the same base plot (our canvas), modify without repeating the same code. \n\n```{r}\ng2.facet <- g1 + geom_point(aes(size = canopyrad.m)) + facet_wrap(~species)\ng2.facet\n```\n\n### Visualize Different Patterns - 3D plots\n\n* 3D not an option in ggplot, why?\n    * Hadley's Philosophy: nothing quotable...but its absence speaks volumes. \n    * But also, from his thesis: \"While it is possible to investigate high-d objects with only static graphics,     it is much easier to do so interactively.\"\n* Alternatives in ggplot: facet_wrap\n* Where are the dead trees, and what species are they?\n\n```{r}\ng3.facet <- g1 + geom_point(aes(size = height.m)) + facet_wrap(~status+species)\ng3.facet\n```\n\n**Contrast with 3D plot**\n\n```{r message=FALSE,warning=FALSE}\nlibrary(scatterplot3d)\n\npipa.l = vs[which(vs$species=='Pipa' & !vs$status=='Dead'),]\npipa.d = vs[which(vs$species=='Pipa' & vs$status=='Dead'),]\nqula.l = vs[which(vs$species=='Qula' & !vs$status=='Dead'),]\nqula.d = vs[which(vs$species=='Qula' & vs$status=='Dead'),]\nother = vs[!vs$species %in% c(\"Pipa\",\"Qula\"),]\n\ns3d = scatterplot3d(pipa.l$easting, pipa.l$northing, pipa.l$height.m, type=\"h\", main=\"Tree and shrub height within OSBS Tower airshed\", xlab=\"Easting (m)\", ylab=\"Northing (m)\", zlab=\"Tree height (m)\", pch=21, color=\"#005826\", box=F, angle=70, scale.y=2.3, xlim=c(403830,403950), ylim=c(3285040,3285120))\n\ns3d$points3d(pipa.d$easting, pipa.d$northing, pipa.d$height.m, type=\"h\", pch=19, col=\"#41614F\")\ns3d$points3d(qula.d$easting, qula.d$northing, qula.d$height.m, type=\"h\", pch=19, col=\"#945232\")\ns3d$points3d(qula.l$easting, qula.l$northing, qula.l$height.m, type=\"h\", pch=21, col=\"#f26522\")\ns3d$points3d(other$easting, other$northing, other$height.m, type=\"h\", pch=19)\n\nlegend(s3d$xyz.convert(403920,3285050,15), pch=21, \n       col=c(\"#005826\", \"#005826\", \"#f26522\", \"#f26522\", \"#000000\"),\n       pt.bg=c(\"#FFFFFF\", \"#005826\", \"#FFFFFF\", \"#945232\", \"gray60\"),\n       legend=c(\"Pipa (live)\", \"Pipa (dead)\", \"Qula (live)\", \"Qula (dead)\", \"Other\"),\n       cex=0.8)\n\n```\n\n### Piecing Together Hadley-verse Packages\n\n* dplyr -> ggplot (subset and plot)\n* In a galaxy far far away... tidyr -> reshape2 -> dplyr -> ggplot\n\n```{r}\n# in one go - one dataset call\nvs  %>% \n  filter(species %in% c(\"Qula\", \"Pipa\"), status %in% c(\"Alive\", \"Dead\"))  %>% \n  ggplot(aes(x=easting, y = northing, color = species)) + \n  facet_wrap(~status+species) + \n  geom_point(aes(size = height.m))\n```\n\n",
    "created" : 1432912394055.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "13|44|29|3|\n174|34|196|3|\n",
    "hash" : "3706930727",
    "id" : "B328E805",
    "lastKnownWriteTime" : 1432936379,
    "path" : "~/GitHub/codingSupportGroup/plottingAndPublication/ggplot2/ggplot2_part1.Rmd",
    "project_path" : "plottingAndPublication/ggplot2/ggplot2_part1.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}